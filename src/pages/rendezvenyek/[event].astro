---
import BaseLayout from '@layouts/BaseLayout.astro';
import Header from '@components/Header.astro';
import { getCollection, getEntries, getEntry, render } from 'astro:content';
import HeaderContent from '@components/HeaderContent.astro';
import MainContent from '@components/MainContent.astro';
import magnifyingGlassPlusIcon from '@assets/icons/magnifying-glass-plus.svg?raw';
import closeIcon from '@assets/icons/close.svg?raw';

const { event: entryId } = Astro.params;

export async function getStaticPaths() {
  const events = await getCollection('events');

  return events.map((entry) => ({
    params: { event: entry.id },
    props: { event: entry },
  }));
}

const entry = await getEntry('events', entryId);

if (!entry) {
  return Astro.redirect('/404');
}

const pageTitle = entry.data.title;
const heading = pageTitle;

const breadcrumbs = [
  {
    url: '/rendezvenyek',
    title: 'Rendezvények',
  },
];

const { Content } = await render(entry);

// const competitionAnnouncement = entry.data.eventMeta?.find(
//   ({ key }) => key === 'Versenykiírás'
// )?.value;

const relatedPosts = entry.data.relatedPosts
  ? await getEntries(entry.data.relatedPosts)
  : null;

// console.log(relatedPosts);

const { announcement, elevationMap, results, photos } = {
  announcement: relatedPosts?.find(
    (x) => x.data?.type === 'competition-announcement'
  ),
  elevationMap: relatedPosts?.find((x) => x.data?.type === 'elevation-map'),
  results: relatedPosts?.find((x) => x.data?.type === 'results'),
  photos: relatedPosts?.find((x) => x.data?.type === 'photos'),
};
---

<BaseLayout pageTitle={pageTitle}>
  <Header>
    <HeaderContent slot="header-content" {...{ heading, breadcrumbs }}>
      <div slot="header-content-subtitle" class="mt-1">
        <p>{entry.data.excerpt}</p>
      </div>
    </HeaderContent>
  </Header>

  <MainContent>
    <div class="prose-default">
      <Content />

      {
        announcement && (
          <div>
            <div class="flex gap-8 items-center justify-between mb-6">
              <h2 class="!m-0">{announcement.data.title}</h2>
              {announcement.data.content.downloadUrl && (
                <a
                  href={announcement.data.content.downloadUrl}
                  class="button"
                  download
                >
                  Letöltés
                </a>
              )}
            </div>

            <div class="fullview-toggle-wrapper mb-4">
              <input
                type="checkbox"
                id="fullview-toggle"
                class="fullview-toggle hidden"
                autocapitalize="nope"
              />
              <label for="fullview-toggle" class="fullview-toggle-label">
                <span>
                  <Fragment set:html={magnifyingGlassPlusIcon} />
                </span>
                <span>
                  <Fragment set:html={closeIcon} />
                </span>
              </label>
              <iframe src={announcement.data.content.embedUrl} />
            </div>
          </div>
        )
      }

      {
        elevationMap && (
          <div>
            <h2>{elevationMap.data.title}</h2>

            <img src={elevationMap.data.content.image} alt="" />
          </div>
        )
      }

      {
        results && (
          <div>
            <h2>{results.data.title}</h2>

            <a href={results.data.content.url} target="blank" class="button">
              Eredmények megtekintése
            </a>
          </div>
        )
      }

      {
        photos?.data?.content?.photos && (
          <div>
            <h2>{photos.data.title}</h2>

            {photos.data.content.photos.map((photo) => (
              <a href={photo.url} target="blank" class="button">
                {photo.title}
              </a>
            ))}
          </div>
        )
      }

      <!-- {
      entry.data.eventMeta?.length && (
        <div>
          <h2>Event Meta</h2>
          <ul>
            {entry.data.eventMeta.map(({ key, value }) => (
              <li>
                <strong>{key}:</strong> {value}
              </li>
            ))}
          </ul>
        </div>
      )
    } -->

      <!-- {
      entry.data.links?.length && (
        <div>
          <h2>Event Meta</h2>
          <ul>
            {entry.data.links.map(({ name, url }) => (
              <li>
                <strong>{name}:</strong> {url}
              </li>
            ))}
          </ul>
        </div>
      )
    } -->
    </div>
  </MainContent>
</BaseLayout>
